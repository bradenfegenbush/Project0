[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\brade\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\brade\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 71.3385ms
[debug]       Load.loadUnit: defsScala took 0.2558ms
[debug] [Loading] Scanning directory C:\Users\brade\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\brade\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.5384 ms
[debug]           Load.resolveProject(global-plugins) took 30.2102ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\brade\.sbt\1.0\plugins, plugins: List(<none>))) took 62.4993ms
[debug] [Loading] Done in C:\Users\brade\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 80.6449ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1989ms
[debug]     Load.loadUnit(file:/C:/Users/brade/.sbt/1.0/plugins/, ...) took 159.6924ms
[debug]   Load.apply: load took 282.6061ms
[debug]   Load.apply: resolveProjects took 4.1145ms
[debug]   Load.apply: finalTransforms took 44.4499ms
[debug]   Load.apply: config.delegates took 10.1976ms
[debug]   Load.apply: Def.make(settings)... took 297.516ms
[debug]   Load.apply: structureIndex took 78.3837ms
[debug]   Load.apply: mkStreams took 1.7596ms
[info] loading global plugins from C:\Users\brade\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3471.2726ms
[debug]           Load.loadUnit: plugins took 21.3435ms
[debug]           Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\brade\IdeaProjects\ContactBook2\project
[debug]             Load.loadUnit: mkEval took 4.0426ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\brade\IdeaProjects\ContactBook2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.012 ms
[info] loading settings for project contactbook2-build from idea.sbt ...
[debug]               Load.resolveProject(contactbook2-build) took 5.7912ms
[debug]             Load.loadTransitive: finalizeProject(Project(id contactbook2-build, base: C:\Users\brade\IdeaProjects\ContactBook2\project, plugins: List(<none>))) took 7.1335ms
[debug] [Loading] Done in C:\Users\brade\IdeaProjects\ContactBook2\project, returning: (contactbook2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1541.2565ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.3393ms
[debug]         Load.loadUnit(file:/C:/Users/brade/IdeaProjects/ContactBook2/project/, ...) took 1567.5822ms
[debug]       Load.apply: load took 1568.6289ms
[debug]       Load.apply: resolveProjects took 0.0733ms
[debug]       Load.apply: finalTransforms took 9.113ms
[debug]       Load.apply: config.delegates took 0.2584ms
[debug]       Load.apply: Def.make(settings)... took 69.9083ms
[debug]       Load.apply: structureIndex took 19.1394ms
[debug]       Load.apply: mkStreams took 0.0015ms
[info] loading project definition from C:\Users\brade\IdeaProjects\ContactBook2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3034.9269ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\brade\IdeaProjects\ContactBook2
[debug]       Load.loadUnit: mkEval took 0.2211ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\brade\IdeaProjects\ContactBook2, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5075 ms
[info] loading settings for project contactbook2 from build.sbt ...
[debug]         Load.resolveProject(contactbook2) took 20.6087ms
[debug]       Load.loadTransitive: finalizeProject(Project(id contactbook2, base: C:\Users\brade\IdeaProjects\ContactBook2, plugins: List(<none>))) took 22.9014ms
[debug] [Loading] Done in C:\Users\brade\IdeaProjects\ContactBook2, returning: (contactbook2)
[debug]     Load.loadUnit: loadedProjectsRaw took 1139.1775ms
[debug]     Load.loadUnit: cleanEvalClasses took 29.7387ms
[debug]   Load.loadUnit(file:/C:/Users/brade/IdeaProjects/ContactBook2/, ...) took 4204.4943ms
[debug] Load.apply: load took 4205.8023ms
[debug] Load.apply: resolveProjects took 0.0741ms
[debug] Load.apply: finalTransforms took 19.1314ms
[debug] Load.apply: config.delegates took 0.2248ms
[debug] Load.apply: Def.make(settings)... took 41.5462ms
[debug] Load.apply: structureIndex took 18.4043ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to ContactBook2 (in build file:/C:/Users/brade/IdeaProjects/ContactBook2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54989 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54989, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ContactBook2 (in build file:/C:/Users/brade/IdeaProjects/ContactBook2/)
[debug] > Exec(idea-shell, None, None)
